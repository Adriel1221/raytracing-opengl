#version 430

#define MAX_RECURSION_DEPTH 5

#define T_MIN 0.001f
#define REFLECT_BIAS 0.001f
#define SHADOW_BIAS 0.0001f

#define FLT_MIN 1.175494351e-38
#define FLT_MAX 3.402823466e+38

#define LIGHT_AMBIENT 0
#define LIGHT_POINT 1
#define LIGHT_DIRECT 2

#define SHADOW_ENABLED
//#define DBG

struct rt_sphere {
	vec4 center;
	vec4 color;
	float radius;
	float reflect;
	int specular;
	float refract;
};

struct rt_light {
	vec4 position;
	vec4 direction;

    int type;
	float intensity;
};

struct rt_scene {
	vec4 camera_pos;
    vec4 quat_camera_rotation;
	vec4 bg_color;

	int canvas_width;
	int canvas_height;
	float viewport_width;
	float viewport_height;

	float viewport_dist;
	int reflect_depth;
	int sphere_count;
	int light_count;
};

layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

layout( std430, binding=1 ) readonly buffer scene_buf
{
    rt_scene scene;
};

layout( std430, binding=2 ) readonly buffer spheres_buf
{
    rt_sphere spheres[ ];
};

layout( std430, binding=3 ) readonly buffer lights_buf
{
    rt_light lights[ ];
};

void __dbg()
{
	#ifdef DBG
	ivec2 pixel_coords = ivec2 (gl_GlobalInvocationID.xy);
    imageStore (img_output, pixel_coords, vec4(1,0,0,0));
	#endif
}

void __dbg(float value)
{
	#ifdef DBG
	ivec2 pixel_coords = ivec2 (gl_GlobalInvocationID.xy);
    imageStore (img_output, pixel_coords, vec4(value,value,value,0));
	#endif
}

vec4 multiplyQuaternion(vec4 q1, vec4 q2) {
	vec4 result;

	result.w = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
	result.x = q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y;
	result.y = q1.w * q2.y + q1.y * q2.w + q1.z * q2.x - q1.x * q2.z;
	result.z = q1.w * q2.z + q1.z * q2.w + q1.x * q2.y - q1.y * q2.x;

	return result;
}

vec4 Rotate(vec4 q, vec4 v)
{
	vec4 qv = v;
	qv.w = 0;

	vec4 mult = multiplyQuaternion(q, qv);
	float scale = 1 / (q.w * q.w + dot(q, q));
	vec4 inverse = - scale * q;
	inverse.w = scale * q.w;
	vec4 result = multiplyQuaternion(mult, inverse);

	return result;
}

vec4 CanvasToViewport(ivec2 pixel_coords)
{
	int x = int (pixel_coords.x - scene.canvas_width / 2.0);
	int y = int (pixel_coords.y - scene.canvas_height / 2.0);

	vec4 result = vec4(
		x * scene.viewport_width / scene.canvas_width,
		y * scene.viewport_height / scene.canvas_height,
		scene.viewport_dist,
		0);
	//return result;
	return Rotate(scene.quat_camera_rotation, result);
}

float IntersectRaySphere(vec4 o, vec4 d, float tMin, int sphereIndex)
{
	float t1, t2;

	vec4 c = spheres[sphereIndex].center;
	float r = spheres[sphereIndex].radius;
	vec4 oc = o - c;

	float k1 = dot(d, d);
	float k2 = 2 * dot(oc, d);
	float k3 = dot(oc, oc) - r * r;
	float discr = k2 * k2 - 4 * k1 * k3;

	if (discr < 0)
	{
		return FLT_MAX;
	}
	else
	{
		t1 = (-k2 + sqrt(discr)) / (2 * k1);
		t2 = (-k2 - sqrt(discr)) / (2 * k1);
	}
	float t = FLT_MAX;
	if (t1 < t && t1 >= tMin)
	{
		t = t1;
	}
	if (t2 < t && t2 >= tMin)
	{
		t = t2;
	}
	return t;
}

vec4 ReflectRay(vec4 r, vec4 normal) {
	return normalize(2 * normal * dot(r, normal) - r);
}

void ClosestIntersection(vec4 o, vec4 d, float tMin, float tMax, out float t, out int sphereIndex) {
	float closest = FLT_MAX;
	int sphere_index = -1;

	for (int i = 0; i < scene.sphere_count; i++)
	{
		float intersect = IntersectRaySphere(o, d, tMin, i);

		if (intersect < tMax && intersect < closest)
		{
			closest = intersect;
			sphere_index = i;
		}
	}

	t = closest;
	sphereIndex = sphere_index;
}

float ComputeLighting(vec4 point, vec4 normal, vec4 view, int specular)
{
	float sum = 0.0;
	vec4 L;

	for (int i = 0; i < scene.light_count; i++)
	{
		if (lights[i].type == LIGHT_AMBIENT) {
			sum += lights[i].intensity;
		}
		else {
			float tMax = 0.0;
			if (lights[i].type == LIGHT_POINT) {
				L = lights[i].position - point;
				tMax = 1.0;
			}
			else if (lights[i].type == LIGHT_DIRECT) {
				L = lights[i].direction;
				tMax = FLT_MAX;
			}

			#ifdef SHADOW_ENABLED
			int sphereIndex;
			float t;
			ClosestIntersection(point, L, T_MIN, tMax, t, sphereIndex);
			if (sphereIndex != -1) continue;
			#endif
			
			float nDotL = dot(normal, L);
			if (nDotL > 0) {
				sum += lights[i].intensity * nDotL / (length(normal) * length(L));
			}
			if (specular <= 0) continue;
			
			vec4 r = ReflectRay(L, normal);
			float rDotV = dot (r, view);
			if (rDotV > 0)
			{
				sum += lights[i].intensity * pow(rDotV / (length(r) * length(view)), specular);
			}
		}
	}
	return sum;
}

void swap(inout float a, inout float b)
{
	float tmp = a;
	a = b;
	b = tmp;
}

bool refract2(in vec4 v, in vec4 n, in float ni_over_nt, out vec4 refracted) {
  vec4 uv = normalize(v);
  float dt = dot(uv, n);
  float discriminant = 1.0 - ni_over_nt * ni_over_nt * (1 - dt * dt);
  if (discriminant > 0) {
    refracted = ni_over_nt * (uv - n * dt) - n * sqrt(discriminant);
    return true;
  } else {
    return false;
  }
}

vec4 refract(vec4 I, vec4 N, float ior) 
{ 
    float cosi = clamp(-1, 1, dot(I, N)); 
    float etai = 1, etat = ior; 
    vec4 n = N; 
    if (cosi < 0) { cosi = -cosi; } 
	else 
	{ 
		float tmp = etai;
		etai = etat;
		etat = tmp;
		//swap(etai, etat);
		n= -N; 
	} 
    float eta = etai / etat; 
    float k = 1 - eta * eta * (1 - cosi * cosi); 
    return k < 0.0 ? vec4(0) : eta * I + (eta * cosi - sqrt(k)) * n; 
}

void fresnel(vec4 I, vec4 N, float ior, out float kr) 
{ 
    float cosi = clamp(-1, 1, dot(I, N)); 
    float etai = 1, etat = ior; 
    if (cosi > 0) 
	{ 
		float tmp = etai;
		etai = etat;
		etat = tmp;
		//swap(etai, etat); 
	} 
    // Compute sini using Snell's law
    float sint = etai / etat * sqrt(max(0.0, 1 - cosi * cosi)); 
    // Total internal reflection
    if (sint >= 1) { 
        kr = 1; 
    } 
    else { 
        float cost = sqrt(max(0.0, 1 - sint * sint)); 
        cosi = abs(cosi); 
        float Rs = ((etat * cosi) - (etai * cost)) / ((etat * cosi) + (etai * cost)); 
        float Rp = ((etai * cosi) - (etat * cost)) / ((etai * cosi) + (etat * cost)); 
        kr = (Rs * Rs + Rp * Rp) / 2; 
    }
} 

bool TraceRayOneHit(vec4 o, vec4 d, float tMin, float tMax, out vec4 color) 
{
	float closest;
	int sphere_index;
	ClosestIntersection(o, d, tMin, tMax, closest, sphere_index);
	if (sphere_index == -1)
	{
		color = scene.bg_color;
		return true;
	}
	if (spheres[sphere_index].refract > 0) return false;

	vec4 p = o + (d * closest);
	vec4 normal = normalize(p - spheres[sphere_index].center);
	vec4 view = -d;
	if (dot(normal, d) > 0)
	{
		normal = -normal;
	}

	color = spheres[sphere_index].color * ComputeLighting(p + normal * SHADOW_BIAS, normal, view, spheres[sphere_index].specular);
	return true;
}

vec4 TraceRay(vec4 o, vec4 d, float tMin, float tMax)
{
	if (scene.reflect_depth == 0) return vec4(0,0,0,0);

	float closest;
	int sphere_index;

	vec4 colors[MAX_RECURSION_DEPTH];
    float reflects[MAX_RECURSION_DEPTH];
	bool isRefract[MAX_RECURSION_DEPTH];
	vec4 refracts[MAX_RECURSION_DEPTH];
	float krs[MAX_RECURSION_DEPTH];

	int recursionCount = 0;

	for (int i = 0; i < scene.reflect_depth; i++)
	{
		ClosestIntersection(o, d, tMin, tMax, closest, sphere_index);
		if (sphere_index == -1)
		{
			colors[recursionCount] = scene.bg_color;
			reflects[recursionCount] = 0;
			++recursionCount;
			break;
		}
		vec4 p = o + (d * closest);
		vec4 normal = normalize(p - spheres[sphere_index].center);

		vec4 view = -d;
		//vec4 offset = normal * REFLECT_BIAS;

		float refraction = spheres[sphere_index].refract;
		if (refraction > 0)
		{
			--i;

			bool outside = dot (d, normal) < 0; 
			vec4 bias = REFLECT_BIAS * normal;

			if (outside) 
			{
				vec4 reflectionDirection = ReflectRay(view, normal); 
				vec4 reflectionRayOrig = outside ? p + bias : p - bias; 
				vec4 reflectionColor;
				if (TraceRayOneHit(reflectionRayOrig, reflectionDirection, tMin, tMax, reflectionColor))
				{
					refracts[recursionCount] = reflectionColor;
				}
			}

			
			// vec4 reflectionColor = castRay(reflectionRayOrig, reflectionDirection, objects, lights, options, depth + 1); 

			//reflects[recursionCount] = 0;
			vec4 refractionColor = vec4(0);
			// compute fresnel
			float kr;
			fresnel(d, normal, refraction, kr);
			krs[recursionCount] = kr;
			// compute refraction if it is not a case of total internal reflection
			if (kr < 1) { 
				vec4 refractionDirection = normalize(refract(d, normal, refraction)); 
				vec4 refractionRayOrig = outside ? p - bias : p + bias; 
				//refractionColor = castRay(refractionRayOrig, refractionDirection, objects, lights, options, depth + 1); 
				o = refractionRayOrig;
				d = refractionDirection;
				//break;
			}
	
			// // mix the two
			// hitColor += reflectionColor * kr + refractionColor * (1 - kr); 
		}
		else 
		{
			//good for surfaces, bad for box, sphere
			if (dot(normal, d) > 0)
			{
				normal = -normal;
			}

			colors[recursionCount] = spheres[sphere_index].color * ComputeLighting(p + normal * SHADOW_BIAS, normal, view, spheres[sphere_index].specular);
			reflects[recursionCount] = spheres[sphere_index].reflect;

			++recursionCount;
			if (spheres[sphere_index].reflect <= 0.0)
				break;

			if (i < scene.reflect_depth - 1) {
				//setup for next iteration
				o = p + normal * REFLECT_BIAS;
				d = ReflectRay(view, normal);
			}
		}
	}

	if (recursionCount <= 1)
	 	return colors[0];

	vec4 totalColor = colors[recursionCount - 1];

	for(int i = recursionCount - 2; i >= 0; i--)
	{
		float reflect = reflects[i];
		vec4 prevColor = colors[i];
		totalColor = prevColor * (1 - reflect) + totalColor * reflect;
		if (isRefract[i])
			totalColor += totalColor * krs[i] + refracts[i] * (1 - krs[i]);
	}

	return totalColor;
}

void main () 
{
	ivec2 pixel_coords = ivec2 (gl_GlobalInvocationID.xy);
	if (pixel_coords.x > scene.canvas_width || pixel_coords.y > scene.canvas_height) return;

	vec4 d = CanvasToViewport(pixel_coords);
	vec4 color = TraceRay(scene.camera_pos, d, T_MIN, FLT_MAX);
	#ifndef DBG
    imageStore (img_output, pixel_coords,color);
	#endif
}                                                             