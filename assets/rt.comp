#version 430

#define MAX_RECURSION_DEPTH 5

#define T_MIN 0.001f
#define REFLECT_BIAS 0.001f
#define SHADOW_BIAS 0.0001f

#define FLT_MIN 1.175494351e-38
#define FLT_MAX 3.402823466e+38

#define LIGHT_AMBIENT 0
#define LIGHT_POINT 1
#define LIGHT_DIRECT 2

#define SHADOW_ENABLED
//#define DBG

struct rt_sphere {
	vec4 center;
	vec4 color;
	float radius;
	float reflect;
	int specular;
	float refract;
};

struct rt_light {
	vec4 position;
	vec4 direction;

    int type;
	float intensity;
};

struct rt_scene {
	vec4 camera_pos;
    vec4 quat_camera_rotation;
	vec4 bg_color;

	int canvas_width;
	int canvas_height;
	float viewport_width;
	float viewport_height;

	float viewport_dist;
	int reflect_depth;
	int sphere_count;
	int light_count;
};

layout (local_size_x = 16, local_size_y = 16) in;
layout (rgba32f, binding = 0) uniform image2D img_output;

layout( std430, binding=1 ) readonly buffer scene_buf
{
    rt_scene scene;
};

layout( std430, binding=2 ) readonly buffer spheres_buf
{
    rt_sphere spheress[ ];
};

layout( std430, binding=3 ) readonly buffer lights_buf
{
    rt_light lightss[ ];
};
const int iterations = 5;
const float maxDist = 1000.0;
const vec3 amb = vec3(1.0);
const float eps = 1e-3;

// struct Camera
// {
// 	vec3 up, right, forward;
// 	vec3 position;
// };

//Camera cam;
#define sp_size 11

vec4 spheres[sp_size];
vec4 colors[sp_size];
vec2 materials[sp_size];

void init()
{
    // X Y Z Radius
    spheres[0] = vec4(      0,       0,    -1.5,    0.1);
    spheres[1] = vec4(      0,    0.25,    -1.5,    0.1);
    spheres[2] = vec4(      0,    -0.7,    -1.5,    0.3);
    spheres[3] = vec4(      0,    -0.1,    -1.5,    0.3);
    spheres[4] = vec4(      0,    -0.1,    -1.5,    0.15);
    spheres[5] = vec4( 1001.0,       0,       0, 1000.0); 
    spheres[6] = vec4(-1001.0,       0,       0, 1000.0);
    spheres[7] = vec4(      0,  1001.0,       0, 1000.0); 
    spheres[8] = vec4(      0, -1001.0,       0, 1000.0);
    spheres[9] = vec4(      0,       0, -1002.0, 1000.0);
	spheres[10] = vec4(      0,    -0.1,    -1,    0.15);

    //R G B Diffuse
    colors[0] = vec4(1.0, 0.8, 0.0,-1.0);
    colors[1] = vec4(0.0, 0.0, 1.0,-1.0);
    colors[2] = vec4(1.0, 1.0, 1.0, 1.0);
    colors[3] = vec4(1.0, 1.0, 1.0, 1.0);
    colors[4] = vec4(1.0, 0.0, 0.0, 1.0);
    colors[5] = vec4(0.0, 1.0, 0.0, 0.7);
    colors[6] = vec4(1.0, 0.0, 0.0, 0.7);
    colors[7] = vec4(1.0, 1.0, 1.0, 0.7);
    colors[8] = vec4(1.0, 1.0, 1.0, 0.7);
    colors[9] = vec4(1.0, 1.0, 1.0, 0.7);
	colors[10] = vec4(1.0, 0.0, 0.0, 0.5);

    //Reflection Coeff, Refraction index
    materials[0] = vec2 (0.0, 0.0);
    materials[1] = vec2 (0.0, 0.0);				
    materials[2] = vec2 (1.0, 0.0);	
    materials[3] = vec2 (0.1, 0.8);	
    materials[4] = vec2 (0.1, 0.8);
    materials[5] = vec2 (0.0, 0.0);				
    materials[6] = vec2 (0.0, 0.0);				
    materials[7] = vec2 (0.1, 0.0);				
    materials[8] = vec2 (0.1, 0.0);				
    materials[9] = vec2 (0.1, 0.0);
	materials[10] = vec2 (0.2, 0.0);	

    // cam.up       = vec3(0.0, 1.0, 0.0);
    // cam.right    = vec3(1.0, 0.0, 0.0);
    // cam.forward  = vec3(0.0, 0.0,-1.0);
    // cam.position = vec3(0.0, 0.0,-0.2);
}

// vec3 getRayDir(vec2 fragCoord)
// {
//   vec2 uv = (gl_GlobalInvocationID.xy / iResolution.xy )*2.0 - 1.0;
//   uv.x *= iResolution.x/iResolution.y;                   
//   return normalize(uv.x * cam.right + uv.y * cam.up + cam.forward);
// }

vec4 multiplyQuaternion(vec4 q1, vec4 q2) {
	vec4 result;

	result.w = q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z;
	result.x = q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y;
	result.y = q1.w * q2.y + q1.y * q2.w + q1.z * q2.x - q1.x * q2.z;
	result.z = q1.w * q2.z + q1.z * q2.w + q1.x * q2.y - q1.y * q2.x;

	return result;
}

vec3 Rotate(vec4 q, vec3 v)
{
	vec4 qv = vec4(v, 0);

	vec4 mult = multiplyQuaternion(q, qv);
	float scale = 1 / (q.w * q.w + dot(q, q));
	vec4 inverse = - scale * q;
	inverse.w = scale * q.w;
	vec3 result = vec3(multiplyQuaternion(mult, inverse));

	return result;
}

vec3 getRayDir(ivec2 pixel_coords)
{
	//vec2 uv = (pixel_coords.xy / vec2(scene.canvas_width, scene.canvas_height)) * 2.0 - 1.0;


	int x = int (pixel_coords.x - scene.canvas_width / 2.0);
	int y = int (pixel_coords.y - scene.canvas_height / 2.0);
	//vec2 uv = vec2(x,y); //* (scene.canvas_width / scene.canvas_height);
	//uv.x *= scene.canvas_width / scene.canvas_height;
	//return normalize(uv.x * cam.right + uv.y * cam.up + cam.forward);

	vec3 result = vec3(
		x * scene.viewport_width / scene.canvas_width,
	 	y * scene.viewport_height / scene.canvas_height,
	 	scene.viewport_dist);
	// return result;
	return normalize(Rotate(scene.quat_camera_rotation, result));
}


// The Intersection funtions and shading funcs are taken from inigo's article:
// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm

bool intersectSphere(vec3 ro, vec3 rd, vec4 sp, float tm, out float t)
{
    bool r = false;
	vec3 v = ro - sp.xyz;
	float b = dot(v,rd);
	float c = dot(v,v) - sp.w*sp.w;
	t = b*b-c;
    if( t > 0.0 )
    {
        t = -b-sqrt(t);
        r = (t > 0.0) && (t < tm);
    }
    return r;
}

float calcInter(vec3 ro, vec3 rd, out vec4 ob, out vec4 col,out vec2 mat)
{
	float tm = maxDist;
	float t;

	if(intersectSphere(ro,rd,spheres[0],tm,t)) { ob = spheres[0]; col = colors[0]; tm = t; mat = materials[0]; }
	if(intersectSphere(ro,rd,spheres[1],tm,t)) { ob = spheres[1]; col = colors[1]; tm = t; mat = materials[1]; }
	if(intersectSphere(ro,rd,spheres[2],tm,t)) { ob = spheres[2]; col = colors[2]; tm = t; mat = materials[2]; }
	if(intersectSphere(ro,rd,spheres[3],tm,t)) { ob = spheres[3]; col = colors[3]; tm = t; mat = materials[3]; }
	if(intersectSphere(ro,rd,spheres[4],tm,t)) { ob = spheres[4]; col = colors[4]; tm = t; mat = materials[4]; }
	if(intersectSphere(ro,rd,spheres[5],tm,t)) { ob = spheres[5]; col = colors[5]; tm = t; mat = materials[5]; }
	if(intersectSphere(ro,rd,spheres[6],tm,t)) { ob = spheres[6]; col = colors[6]; tm = t; mat = materials[6]; }
	if(intersectSphere(ro,rd,spheres[7],tm,t)) { ob = spheres[7]; col = colors[7]; tm = t; mat = materials[7]; }
	if(intersectSphere(ro,rd,spheres[8],tm,t)) { ob = spheres[8]; col = colors[8]; tm = t; mat = materials[8]; }
    if(intersectSphere(ro,rd,spheres[9],tm,t)) { ob = spheres[9]; col = colors[9]; tm = t; mat = materials[9]; }
	if(intersectSphere(ro,rd,spheres[10],tm,t)) { ob = spheres[9]; col = colors[10]; tm = t; mat = materials[10]; }

	return tm;
}

bool inShadow(vec3 ro,vec3 rd,float d)
{
	float t;
	bool ret = false;

	if(intersectSphere(ro,rd,spheres[2],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[3],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[4],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[5],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[6],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[7],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[8],d,t)){ ret = true; }
	if(intersectSphere(ro,rd,spheres[10],d,t)){ ret = true; }

	return ret;
}

vec3 calcShade(vec3 pt, vec4 ob, vec4 col,vec2 mat,vec3 n)
{

	float dist,diff;
	vec3 lcol,l;

	vec3 color = vec3(0.0);
	vec3 ambcol = amb * (1.0-col.w) * col.rgb;
	vec3 scol = col.w * col.rgb;

	if(col.w > 0.0) //If its not a light
	{
		l = spheres[0].xyz - pt;
		dist = length(l);
		l = normalize(l);
		lcol = colors[0].rgb;
		diff = clamp(dot(n,l),0.0,1.0);
		color += (ambcol * lcol + lcol * diff * scol) / (1.0+dist*dist);
		if(inShadow(pt,l,dist))
			color *= 0.7;

		l = spheres[1].xyz - pt;
		dist = length(l);
		l = normalize(l);
		vec3 lcol = colors[1].rgb;
		diff = clamp(dot(n,l),0.0,1.0);
		color += (ambcol * lcol + lcol * diff * scol) / (1.0+dist*dist);

		if(inShadow(pt,l,dist))
			color *= 0.7;
	}
	else
		color = col.rgb;

	return color;
}

float getFresnel(vec3 n,vec3 rd,float r0)
{
    float ndotv = clamp(dot(n, -rd), 0.0, 1.0);
	return r0 + (1.0 - r0) * pow(1.0 - ndotv, 5.0);
}

vec3 getReflection(vec3 ro,vec3 rd)
{
	vec3 color = vec3(0);
	vec4 ob,col;
    vec2 mat;
	float tm = calcInter(ro,rd,ob,col,mat);
	if(tm < maxDist)
	{
		vec3 pt = ro + rd*tm;
		vec3 n = normalize(pt - ob.xyz);
		color = calcShade(pt,ob,col,mat,n);
	}
	return color;
}

void rotObjects()
{
	spheres[0].x += sin(1) * 0.4;
    spheres[0].z += cos(1) * 0.4;
    
    spheres[1].x += sin(1) * -0.3;
    spheres[1].z += cos(1) * -0.3;
}


void main()
{
    init();
	float fresnel,tm;
	vec4 ob,col;
    vec2 mat;
	vec3 pt,refCol,n,refl;

	ivec2 pixel_coords = ivec2 (gl_GlobalInvocationID.xy);

	vec3 mask = vec3(1.0);
	vec3 color = vec3(0.0);
	vec3 ro = vec3(scene.camera_pos);
	vec3 rd = getRayDir(pixel_coords);
    
    rotObjects();
	
	for(int i = 0; i < iterations; i++)
	{
		tm = calcInter(ro,rd,ob,col,mat);
		if(tm < maxDist)
		{
			pt = ro + rd*tm;
			n = normalize(pt - ob.xyz);
			fresnel = getFresnel(n,rd,mat.x);
			mask *= fresnel;
            
			if(mat.y > 0.0) // Refractive
			{
				ro = pt - n*eps;
				refl = reflect(rd,n);
				refCol = getReflection(ro, refl);
				color += refCol * mask;
				mask = col.rgb * (1.0 - fresnel) * (mask / fresnel);
				rd = refract(rd, n, mat.y);
			}
			else if(mat.x > 0.0) // Reflective
			{
				color += calcShade(pt,ob,col,mat,n) * (1.0 - fresnel) * mask / fresnel;
				ro = pt + n*eps;
				rd = reflect(rd, n);
			}
			else // Diffuse
            {
				color += calcShade(pt,ob,col,mat,n) * mask/fresnel;
                break;
            }
		}
	}
	
	imageStore (img_output, pixel_coords, vec4(color,0));
	//imageStore(img_output,);
	//fragColor = vec4(color,1.0);
}